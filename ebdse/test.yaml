# ebdse -v run type=cql yaml=baselines/iot tags=phase:schema host=dsehost
bindings:
  machine_id: compose Mod(<<sources:1000>>); ToHashedUUID() -> java.util.UUID
  sensor_name: HashedLineToString('data/variable_words.txt')
  time: ToDate()
  sensor_value: compose normal(0.0,5.0); Add(100.0) -> double
  station_id: compose Mod(<<stations:100>>); ToHashedUUID() -> java.util.UUID
blocks:
  - tags:
      phase: schema
    params:
      prepared: false
    statements:
     - create-keyspace: "create keyspace if not exists test WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'} AND durable_writes = true;"
     - create-table : |
        create table if not exists test.test (
        machine_id UUID,     // source machine
        sensor_name text,    // sensor name
        time timestamp,      // timestamp of collection
        sensor_value double, //
        station_id UUID,     // source location
        PRIMARY KEY (machine_id, sensor_name, time)
        ) WITH CLUSTERING ORDER BY (sensor_name ASC, time DESC)
         AND compression = { 'sstable_compression' : '<<compression:LZ4Compressor>>' }
         AND compaction = {
         'class': 'TimeWindowCompactionStrategy',
         'compaction_window_size': <<expiry_minutes:60>>,
         'compaction_window_unit': 'MINUTES'
        };
     - |
        truncate table baselines.iot;
  - tags:
      phase: rampup
    params:
      cl: <<write_cl:LOCAL_QUORUM>>
    statements:
     - insert-rampup: |
        insert into <<keyspace:baselines>>.<<table:iot>>
        (machine_id, sensor_name, time, sensor_value, station_id)
        values ({machine_id}, {sensor_name}, {time}, {sensor_value}, {station_id})
  - tags:
      phase: verify
      type: read
    params:
      ratio: 1
      cl: <<read_cl:LOCAL_QUORUM>>
    statements:
     - select-verify: |
         select * from <<keyspace:baselines>>.<<table:iot>>
         where machine_id={machine_id} and sensor_name={sensor_name} and time={time};
  - tags:
      phase: main
      type: read
    params:
      ratio: 1
      cl: <<read_cl:LOCAL_QUORUM>>
    statements:
     - select-read: |
         select * from <<keyspace:baselines>>.<<table:iot>>
         where machine_id={machine_id} and sensor_name={sensor_name}
         limit <<limit:10>>
  - tags:
      phase: main
      type: write
    params:
      ratio: 9
      cl: <<write_cl:LOCAL_QUORUM>>
    statements:
     - insert-main: |
        insert into <<keyspace:baselines>>.<<table:iot>>
        (machine_id, sensor_name, time, sensor_value, station_id)
        values ({machine_id}, {sensor_name}, {time}, {sensor_value}, {station_id})
